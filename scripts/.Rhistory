emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Store Pvalues to correct for multiple corrections later
# Figure
figure<- plotfunction(emm0.1, "Activating Positive Affect")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
figure
# 3) AF_SoothingPositiveAffect ######
formula <- 'AF_SoothingPositiveAffect ~ Phase*Breathing_Condition + (1|Subject)' # Declare formula
dataModel = data # Ensure correct data is taken
rm(d0.1, d0.2, d0.3, tabel, chosenModel, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
# d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
modelNames = c(d0.1)
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("Phase:Breathing_Condition", chosenModel[[1]])) # Visualize the three way interaction we are interested in
emmeans0.1<- emmeans(chosenModel[[1]], pairwise ~ Phase | Breathing_Condition, adjust ="none", type = "response") # Pairwise comparisons
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Store Pvalues to correct for multiple corrections later
# Figure
figure<- plotfunction(emm0.1, "Soothing Positive Affect")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
figure<- figure +
geom_text(x=1, y= 68, label="***", colour = "#F0E442") +
geom_text(x=1.8, y= 70, label="***", colour = "#0072B2")
figure
# Correction for multiple comparisons ####
names = c('Negative_Control', 'Negative_Slow', 'Positive Affect_Control', 'Positive Affect_Slow', 'Positive Soothing_Control', 'Positive Soothing_Slow')
ps = list()
ps[names] = p.adjust(pvalues, method = "fdr", length(pvalues)) # Create list containing fdr corrected pvalues
ps
# Load in packages ####
library(car)
library(lme4)
library(reshape2)
library(readr)
library(plotly)
library(dplyr)
library(emmeans)
library(ggplot2)
library(effects)
library(egg)
library(multcompView)
library(ggthemes)
library(ggsignif)
library(papaja)
#Set environment ####
rm(list = ls()) # Clear environment
cat("\014") # Clear console # # Or ctrl + l in VSCode
dev.off() # Clear plot window
# Load in data
audioData <-
as.data.frame(read_parquet("../loc_data/df_compare_lld.parquet"
))
audioData <-
as.data.frame(read_parquet("../loc_data/df_compare_lld.parquet"
))
library(arrow)
audioData <-
as.data.frame(read_parquet("../loc_data/df_compare_lld.parquet"
))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
audioData <- as.data.frame(read_parquet("df_compare_lld.parquet"))
View(audioData)
View(audioData)
View(audioData)
summary(audioData)
summary(audioData)
head(dataAudio)
head(audioData)
head(audioData)
# Removing the last two phases (and all related data) + habituation
audioData = audioData[audioData$phaseName != "SART", ]
audioData = audioData[audioData$phaseName != "PassiveViewing", ]
audioData = audioData[audioData$phaseName != "Habituation", ]
head(audioData)
head(audioData)
head(audioData)
View(audioData)
audioData$F0semitoneFrom27.5Hz_sma3nz_amean
audioData$F0final_sma
colnames(audioData)
#Set environment ####
rm(list = ls()) # Clear environment
cat("\014") # Clear console # # Or ctrl + l in VSCode
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
# Load in data ####
audioData <- as.data.frame(read_parquet("df_gemaps_func (1).parquet"))
View(audioData)
# Removing the last two phases (and all related data) + habituation
audioData = audioData[audioData$phaseName != "SART", ]
audioData = audioData[audioData$phaseName != "Habituation", ]
audioData = audioData[audioData$phaseName != "PassiveViewing", ]
colnames(audioData)
audioData = subset(audioData, select = c(index, fil, start, end,
F0semitoneFrom27.5Hz_sma3nz_amean,
jitterLocal_sma3nz_amean,
shimmerLocaldB_sma3nz_amean,
HNRdBACF_sma3nz_amean,
MeanVoicedSegmentLengthSec,
VoicedSegmentsPerSec,
participantNum, phaseNum))
audioData = subset(audioData, select = c(index, file, start, end,
F0semitoneFrom27.5Hz_sma3nz_amean,
jitterLocal_sma3nz_amean,
shimmerLocaldB_sma3nz_amean,
HNRdBACF_sma3nz_amean,
MeanVoicedSegmentLengthSec,
VoicedSegmentsPerSec,
participantNum, phaseNum))
rm(list = ls()) # Clear environment
cat("\014") # Clear console # # Or ctrl + l in VSCode
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
audioData <- as.data.frame(read_parquet("df_gemaps_func (1).parquet"))
levels(audioData$phaseName)
audioData$phaseName = as.factor(audioData$phaseName)
levels(audioData$phaseName)
audioData$phaseName = as.factor(audioData$phaseName)
audioData = audioData[audioData$phaseName != "SART", ]
audioData = audioData[audioData$phaseName != "PassiveViewing", ]
audioData = audioData[audioData$phaseName != "Habituation", ]
# Subset of columns
audioData = subset(audioData, select = c(index, file, start, end,
F0semitoneFrom27.5Hz_sma3nz_amean,
jitterLocal_sma3nz_amean,
shimmerLocaldB_sma3nz_amean,
HNRdBACF_sma3nz_amean,
MeanVoicedSegmentLengthSec,
VoicedSegmentsPerSec,
participantNum, phaseNum))
View(audioData)
audioData = subset(audioData, select = c(F0semitoneFrom27.5Hz_sma3nz_amean,
jitterLocal_sma3nz_amean,
shimmerLocaldB_sma3nz_amean,
HNRdBACF_sma3nz_amean,
MeanVoicedSegmentLengthSec,
VoicedSegmentsPerSec,
participantNum, phaseNum))
densityPlot(audioData$F0semitoneFrom27.5Hz_sma3nz_amean)
densityPlot(audioData$jitterLocal_sma3nz_amean)
densityPlot(audioData$shimmerLocaldB_sma3nz_amean)
densityPlot(audioData$HNRdBACF_sma3nz_amean)
densityPlot(audioData$MeanVoicedSegmentLengthSec)
densityPlot(audioData$VoicedSegmentsPerSec)
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ phaseNum + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
densityPlot(audioData$F0semitoneFrom27.5Hz_sma3nz_amean)
audioData$participantNum = as.factor(audioData$participantNum)
audioData$phaseName = as.factor(audioData$phaseName)
#Set environment ####
rm(list = ls()) # Clear environment
cat("\014") # Clear console # # Or ctrl + l in VSCode
dev.off() # Clear plot window
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
# Load in data ####
audioData <- as.data.frame(read_parquet("df_gemaps_func (1).parquet"))
View(audioData)
audioData$participantNum = as.factor(audioData$participantNum)
audioData$phaseName = as.factor(audioData$phaseName)
audioData = audioData[audioData$phaseName != "SART", ]
audioData = audioData[audioData$phaseName != "PassiveViewing", ]
audioData = audioData[audioData$phaseName != "Habituation", ]
# Subset of columns
audioData = subset(audioData, select = c(F0semitoneFrom27.5Hz_sma3nz_amean,
jitterLocal_sma3nz_amean,
shimmerLocaldB_sma3nz_amean,
HNRdBACF_sma3nz_amean,
MeanVoicedSegmentLengthSec,
VoicedSegmentsPerSec,
participantNum, phaseName))
densityPlot(audioData$F0semitoneFrom27.5Hz_sma3nz_amean)
densityPlot(audioData$jitterLocal_sma3nz_amean)
densityPlot(audioData$shimmerLocaldB_sma3nz_amean)
densityPlot(audioData$HNRdBACF_sma3nz_amean)
densityPlot(audioData$HNRdBACF_sma3nz_amean)
densityPlot(audioData$MeanVoicedSegmentLengthSec)
densityPlot(audioData$VoicedSegmentsPerSec)
densityPlot(audioData$VoicedSegmentsPerSec)
densityPlot(audioData$MeanVoicedSegmentLengthSec)
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ phaseNum + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
options(contrasts = c("contr.sum","contr.poly")) # Use this for the p value of the t test
nAGQ = 1
d0.1 <- lmer(formula,data=dataModel)
d0.1 <- lmer(formula,data=dataModel)
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ phaseName + (1|participantNum)' # Declare formula
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
tabel
Anova(chosenModel[[1]], type = 'III')
pvalues = c() # Create a variable to store all p-values to correct later
cbPalette <- c("#F0E442", "#0072B2", "#D55E00") # Define Colorblind proof plotting colors
emmeans0.1<- emmeans(chosenModel[[1]], pairwise ~ phaseName, adjust ="none", type = "response") # Pairwise comparisons
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Store Pvalues to correct for multiple corrections later
figure<- plotfunction(emm0.1, "F0")
# function for plot
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=Phase, y=emmean, colour = Breathing_Condition)) +
geom_point(aes(group = Breathing_Condition), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Breathing_Condition),size = 1, position = position_dodge(width = 0.3))+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
# Figure
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=Phase, y=emmean, colour = phaseName)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = phaseName),size = 1, position = position_dodge(width = 0.3))+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
# Figure
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=Phase, y=emmean, colour = phaseName)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = phaseName),size = 1, position = position_dodge(width = 0.3))+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3))+
labs(y = title, x = "phaseName")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = phaseName),size = 1, position = position_dodge(width = 0.3))+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(,size = 1, position = position_dodge(width = 0.3))+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(size = 1, position = position_dodge(width = 0.3))+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
# function for plot
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
# Figure
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(emmean), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
# function for plot
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(group = phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, group = phaseName)) +
geom_point(size = 4) +
geom_line(aes(group = phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(group = phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
figure<- plotfunction(emm0.1, "F0")
figure
# function for plot
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName, group = 1)) +
geom_point(size = 4) +
geom_line(aes(group = phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
# Figure
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(group = emmeans), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
# Figure
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = phaseName)) +
geom_point(size = 4) +
geom_line(aes(group = phaseName), size = 1)+
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE))+
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
# 2) F0semitoneFrom27.5Hz_sma3nz_amean ######
formula <- 'jitterLocal_sma3nz_amean ~ phaseName + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3, tabel, chosenModel, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
emmeans0.1<- emmeans(chosenModel[[1]], pairwise ~ phaseName, adjust ="none", type = "response") # Pairwise comparisons
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Store Pvalues to correct for multiple corrections later
figure<- plotfunction(emm0.1, "jitterLocal")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
# figure<- figure +
#   geom_text(x=1.4, y=15, label="***", colour = "#F0E442") +
#   geom_text(x=1.8, y=11, label="***", colour = "#0072B2")
figure
View(audioData)
audioData$phaseName[audioData$phaseName == 'Breathing '] = 'Breathing'
audioData$phaseName[audioData$phaseName == 'Calculus '] = 'Calculus'
levels(audioData$phaseName)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
data <- read_delim("data_SF.txt")
data = data[data$Phase != "SART", ]
data = data[data$Phase != "PassiveViewing", ]
data = data[data$Phase != "Habituation", ]
data = data[data$tDCSGroup != "Active", ]
data <- read_delim("data_SF.txt")
View(data)
Data$Breathing_Cond<- 0
audioData$Breathing_Cond<- 0
audioData$Breathing_Cond<- 0
for (i in 1:nrow(audioData$participantNum)){
audioData$Breathing_Cond[i]<- data$Subject[i]
}
# Add column
audioData$Breathing_Cond<- 0
for (i in 1:nrow(audioData)){
if (audioData$participantNum[i] == data$Subject[i]) {
audioData$Breathing_Cond[i]<- data$Breathing_Condition[i]
}
}
audioData$Breathing_Cond<- 0
for (i in 1:nrow(audioData)){
audioData$Breathing_Cond[i]<- data$Breathing_Condition[audioData$participantNum[i] == data$Subject]
}
