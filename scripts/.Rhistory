# plots ####
# making long format of the data
part = as.factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
Dataset<- cbind(Dataset, part)
Dataset_Wide = subset(Dataset, select = -c(Totaal))
Dataset_Long<- melt(Dataset_Wide, id.vars = "part")
colnames(Dataset_Long)[1] <- "Participant"
colnames(Dataset_Long)[2] <- "Position"
colnames(Dataset_Long)[3] <- "Rel_Blink"
View(Dataset_Long)
#Default Scale
s <- ggplot(Dataset_Long, aes(x=Position, y=Rel_Blink)) +
geom_boxplot(outlier.shape = NA)
s + geom_jitter(aes(colour = Participant),width = 0.3)
model = betareg(Rel_Blink ~ Position, data = Dataset_Long)
summary(model)$pseudo.r.squared
model100 <- update(model, subset = c(-100, -115, -46)) # this causes an increase of the precision parameter with 8
coef(model, model = "precision")
coef(model100, model = "precision")
plot(model100)
summary(model100)
Anova(model100, type = "III")
joint_tests(model)
marginal = emmeans(model100, pairwise~Position, adj = "bonferroni")
pairs(marginal)
marginal
#calculate the number of model parameters - 1
k=length(model100$coefficients)-1
#calculate sum of squared residuals
SSE=sum(model100$residuals**2)
#calculate total observations in dataset
n=length(model100$residuals)
#calculate residual standard error
x<- sqrt(SSE/(n-(1+k)))
eff_size(pairs(marginal), x, df.residual(model100), method = "identity")
marginal
data1 <- Dataset_Long$Rel_Blink[Position == "Random"]
data1 <- Dataset_Long$Rel_Blink[Position = "Random"]
data1
Dataset_Long$Rel_Blink[Position = "Random"]
Dataset_Long$Rel_Blink
data1 <- Dataset_Long[ which(Position=='Random'),]
data1 <- Dataset_Long$Rel_Blink[ which(Position=='Random'),]
data1 <- Dataset_Long$Rel_Blink[1:8]
data1
data2 <- Dataset_Long$Rel_Blink[9:16]
data2
data2 <- Dataset_Long$Rel_Blink[9:16]
data2
data2 <- Dataset_Long$Rel_Blink[112:120]
data2
data1 <- Dataset_Long$Rel_Blink[1:15]
data2 <- Dataset_Long$Rel_Blink[16:30]
data1
data2Âµ
data2
#find sample standard deviation of each sample
s1 <- sd(data1)
s2 <- sd(data2)
n1 <- length(data1)
n2 <- length(data2)
pooled <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2) / (n1+n1-2))
pooled
marginal
pooled
(0.05754/pooled)
eff_size(pairs(marginal), x, df.residual(model100), method = "identity")
# load packages
library(car)
library(lme4)
library(lattice)
library(reshape2)
library(rio)
library(writexl)
library(splitstackshape)
library(readr)
library(plotly)
library(dplyr)
library(emmeans)
library(foreign)
library(ggplot2)
library(gplots)
library(MASS)
library(betareg)
library(devtools)
library(lmtest)
library(multcompView)
library(lmtest)
# clear list
rm(list = ls())
# clear plot window
dev.off() # Clear plot window
# import data
Data<- import_list("C:/Users/Gebruiker/Desktop/Psychologie/Masterproef/Masterproef II/BlinksFinalFinal.xlsx", rbind=TRUE)
#Data <- Data[-c(1:1176), ] #only when multipleblink script has error
# set parameters (see: dataframe AantallenChecken.R)
random<- 54362
leesteken<- 9071
punt<- 3919
uitroep<- 370
vraag<- 785
komma<- 4007
eol<- 4259
combo<- 1056
# remove outlier from blinks ####
# remove everything above 1000ms and under 20ms
Data<-Data[!(Data$DurFix > 1000), ]
Data<-Data[!(Data$DurFix < 20), ]
# look at the distribution
# divide into samples based on sample rate of eyelink
hist(Data$DurFix, breaks = 1000)
mean(Data$DurFix)
# mean and SD from every participant
Data$Mean<- 0
Data$SD<- 0
for (part in 21:35) {
x<- paste0("pp", part)
Data$Mean[Data$Subject == x]<- mean(Data$DurFix[Data$Subject == x])
Data$SD[Data$Subject == x]<- sd(Data$DurFix[Data$Subject == x])
}
# delete everything that is 1.5SD above
Data$Delete<- 0
for (row in 1:nrow(Data)) {
if (Data$DurFix[row] > (Data$Mean[row] + (1.5*Data$SD[row]))) {Data$Delete[row]<- 1}
}
Data<-Data[!(Data$Delete == 1), ]
hist(Data$DurFix, breaks = 1000)
# create extra columns (if we don't differentiate between blinks before and after region of interest) ####
# whenever a blink and point occurs
Data$BlinkPunt<- 0
for (row in 1:nrow(Data)) {
if((sum(Data$BlinkPuntB[row], Data$BlinkPuntA[row]) >= 1))
{Data$BlinkPunt[row] <- 1
}
}
# whenever a blink and exclamation mark occurs
Data$BlinkUitroep<- 0
for (row in 1:nrow(Data)) {
if((sum(Data$BlinkUitroepB[row], Data$BlinkUitroepA[row]) >= 1))
{Data$BlinkUitroep[row] <- 1
}
}
# whenever a blink and question mark occurs
Data$BlinkVraag<- 0
for (row in 1:nrow(Data)) {
if((sum(Data$BlinkVraagB[row], Data$BlinkVraagA[row]) >= 1))
{Data$BlinkVraag[row] <- 1
}
}
# whenever a blink and comma occurs
Data$BlinkKomma<- 0
for (row in 1:nrow(Data)) {
if((sum(Data$BlinkKommaB[row], Data$BlinkKommaA[row]) >= 1))
{Data$BlinkKomma[row] <- 1
}
}
# create dataframe without unnecessary columns
Data = subset(Data, select = -c(StartFix,EndFix,
BlinkEndB, BlinkEndA,
BlinkPuntB, BlinkPuntA,
BlinkUitroepB, BlinkUitroepA,
BlinkVraagB, BlinkVraagA,
BlinkKommaB, BlinkKommaA,
BlinkComboB, BlinkComboA, Delete) )
# make table for statistical analysis ####
# create empty dataset
Dataset <- data.frame("Random"=c(0),"Leesteken"=c(0),"Punt"=c(0),"Uitroepteken"=c(0),"Vraag"=c(0),"Komma"=c(0),"EOL"=c(0),"Combo"=c(0), "Totaal"=c(0))
# fill the dataset with blink data for each participant
for (p in 21:35) {
x<- paste0("pp", p)
table<- cbind(((sum(Data$BlinkRandom[Data$Subject == x]))/random),
((sum(Data$BlinkLeesteken[Data$Subject == x]))/leesteken),
((sum(Data$BlinkPunt[Data$Subject == x]))/punt),
((sum(Data$BlinkUitroep[Data$Subject == x]))/uitroep),
((sum(Data$BlinkVraag[Data$Subject == x]))/vraag),
((sum(Data$BlinkKomma[Data$Subject == x]))/komma),
((sum(Data$BlinkEndOfLine[Data$Subject == x]))/eol),
((sum(Data$BlinkCombination[Data$Subject == x]))/combo)
)
table<- cbind(table, sum(table))
Dataset[nrow(Dataset) + 1, ] <- table
}
Dataset<- Dataset[-c(1), ]
# plots ####
# making long format of the data
part = as.factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
Dataset<- cbind(Dataset, part)
Dataset_Wide = subset(Dataset, select = -c(Totaal))
Dataset_Long<- melt(Dataset_Wide, id.vars = "part")
colnames(Dataset_Long)[1] <- "Participant"
colnames(Dataset_Long)[2] <- "Position"
colnames(Dataset_Long)[3] <- "Rel_Blink"
View(Dataset_Long)
write_xlsx(Dataset_Long,"C:/Users/Gebruiker/Desktop/Dataset_Long.xlsx")
write_csv(Dataset_Long,"C:/Users/Gebruiker/Desktop/Dataset_Long.csv")
View(Dataset_Wide)
write_csv(Dataset_Long,"C:/Users/Gebruiker/Desktop/Dataset_Wide.csv")
write_csv(Dataset_Wide,"C:/Users/Gebruiker/Desktop/Dataset_Wide.csv")
# Set environment ####
# Install and load packages
library(lme4)
library(car)
library(lmerTest)
library(glmmTMB)
library(plotly)
library(dplyr)
library(emmeans)
library(jtools)
library(rio)
library(effects)
library(reshape2)
library(ggsignif)
# Clear list
rm(list = ls())
# Clear environment
rm(list = ls())
# Set directory
setwd ("C:/Users/Gebruiker/Desktop/Psychologie/Psycho 22-23/Stage 22-23/Lais")
# HRV data
HRV<- import_list("HRV.xlsx", rbind=TRUE)
# Dataset to indicate which protocol was applied
stim<- import_list("NbackResults_Affective.xlsx", rbind=TRUE)
View(HRV)
View(stim)
HRV$protocol<- 0
for (row in 1:nrow(HRV)) {
HRV$protocol[row]<-
stim$Protocol[(stim$Subject == HRV$Participant[row])
& (stim$Session == HRV$Session[row])][1]
}
# Making long data
Dataset_Wide = subset(HRV, select = -c(...1))
Dataset_Long<- melt(Dataset_Wide, id.vars = c("Participant", "protocol", "Session"))
colnames(Dataset_Long)[2] <- "Protocol"
colnames(Dataset_Long)[4] <- "Epoch"
colnames(Dataset_Long)[5] <- "Rmssd"
# Factorize
Dataset_Long$Epoch <- as.factor(Dataset_Long$Epoch)
Dataset_Long$Participant <- as.factor(Dataset_Long$Participant)
Dataset_Long$Protocol <- as.factor(Dataset_Long$Protocol)
Dataset_Long$Session <- as.ordered(Dataset_Long$Session)
# Only select relevant epochs
Dataset_Long <- subset(Dataset_Long, Epoch == '5min' | Epoch == 'Last5mintdcs')
qplot(Dataset_Long$Rmssd, geom="histogram")
boxplot(Dataset_Long$Rmssd)
Dataset_Long<-Dataset_Long[!(Dataset_Long$Rmssd > 130), ]
boxplot(Dataset_Long$Rmssd)
# Testing
Formula_HRV <- Rmssd ~ Epoch*Protocol + Session + (1|Participant)
gauss.HRV <- lmer(Formula_HRV,data=Dataset_Long)
gamma.HRV  <- glmer(Formula_HRV,data=Dataset_Long, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=1)
tabel <- cbind(AIC(gauss.HRV), AIC(gamma.HRV))
tabel
Anova(gamma.HRV, type = "III")
emmeans0.1<- emmeans(gamma.HRV, pairwise ~ Epoch | Protocol, adjust ="fdr", type = "response")
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values=cbPalette)+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= "#F0E442", "#0072B2")+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV<- figureHRV +
geom_text(x=1.5, y=54, label="*", colour = "#F0E442")
figureHRV
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= "#F0E442", "#0072B2", "#D55E00")+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV<- figureHRV +
geom_text(x=1.5, y=54, label="*", colour = "#F0E442")
figureHRV
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= ("#F0E442", "#0072B2", "#D55E00"))+
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= ("#F0E442" "#0072B2" "#D55E00"))+
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= c("#F0E442", "#0072B2", "#D55E00"))+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV<- figureHRV +
geom_text(x=1.5, y=54, label="*", colour = "#F0E442")
figureHRV
emmeans0.2<- emmeans(gamma.HRV, pairwise ~ Protocol | Epoch, adjust ="fdr", type = "response")
emm0.2 <- summary(emmeans0.2)$emmeans
emmeans0.2$contrasts
figureHRV1<- ggplot(emm0.2, aes(x=Protocol, y=emmean)) +
geom_point( size = 4, position = position_dodge(width = 0.3)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= c("#F0E442", "#0072B2", "#D55E00"))+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV1
figureHRV1<- ggplot(emm0.2, aes(x=Protocol, y=emmean)) +
geom_point( size = 4, position = position_dodge(width = 0.3)) +
geom_point(size = 4, position = position_dodge(width = 0.3)) +
geom_line(size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Protocol")+
scale_colour_manual(values= c("#F0E442", "#0072B2", "#D55E00"))+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV1
figureHRV1<- ggplot(emm0.1, aes(x=Protocol, y=emmean, colour = Epoch)) +
geom_point(aes(group = Epoch), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Epoch), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Epoch), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= c("#F0E442", "#0072B2", "#D55E00"))+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV1
# 1) Between epochs
figureHRV<- ggplot(emm0.1, aes(x=Epoch, y=emmean, colour = Protocol)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Protocol), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Protocol), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= c("#F0E442", "#0072B2", "#D55E00"))+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV<- figureHRV +
geom_text(x=1.5, y=54, label="*", colour = "#F0E442")
figureHRV
# 2) Between epochs
figureHRV1<- ggplot(emm0.1, aes(x=Protocol, y=emmean, colour = Epoch)) +
geom_point(aes(group = Epoch), size = 4, position = position_dodge(width = 0.3)) +
geom_point(aes(group = Epoch), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Epoch), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = "HRV", x = "Epoch")+
scale_colour_manual(values= c("#F0E442", "#0072B2", "#D55E00"))+
theme_apa() +
ggtitle("HRV data") +
theme(plot.title = element_text(face = "bold"))
figureHRV1
rm(list = ls()) # Clear environment
cat("\014") # Clear console # # Or ctrl + l in VSCode
dev.off() # Clear plot window
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
library(car)
library(lme4)
library(reshape2)
library(readr)
library(plotly)
library(dplyr)
library(emmeans)
library(ggplot2)
library(effects)
library(arrow)
library(ggthemes)
library(ggsignif)
#Set environment ####
rm(list = ls()) # Clear environment
cat("\014") # Clear console # # Or ctrl + l in VSCode
dev.off() # Clear plot window
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
options(contrasts = c("contr.sum","contr.poly")) # Use this for the p value of the t test
nAGQ = 1
pvalues = c() # Create a variable to store all p-values to correct later
cbPalette <- c("#F0E442", "#0072B2", "#D55E00") # Define Colorblind proof plotting colors
# function for plot
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = Breathing_Cond)) +
geom_point(aes(group = Breathing_Cond), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Breathing_Cond), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
data <- read_delim("../loc_data/data_SF.txt")
data <- read_delim("../loc_data/Data_SF.txt")
data <- read_delim("directory/loc_data/Data_SF.txt")
data <- read_delim("Directory/loc_data/Data_SF.txt")
data <- read_delim(".../loc_data/Data_SF.txt")
# Load in data ####
data <- read_delim("../loc_data/Data_SF.txt")
data <- read_delim("../loc_data/Data_SF.txt")
audioData <- as.data.frame(read_parquet("../loc_data/df_gemaps_func.parquet"))
library(car)
library(lme4)
library(reshape2)
library(readr)
library(plotly)
library(dplyr)
library(emmeans)
library(ggplot2)
library(effects)
library(arrow)
library(ggthemes)
library(ggsignif)
#Set environment ####
rm(list = ls()) # Clear environment
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
options(contrasts = c("contr.sum","contr.poly")) # Use this for the p value of the t test
nAGQ = 1
pvalues = c() # Create a variable to store all p-values to correct later
cbPalette <- c("#F0E442", "#0072B2", "#D55E00") # Define Colorblind proof plotting colors
# function for plot
plotfunction <-
function(emmean_dataframe, title){
ggplot(emmean_dataframe, aes(x=phaseName, y=emmean, colour = Breathing_Cond)) +
geom_point(aes(group = Breathing_Cond), size = 4, position = position_dodge(width = 0.3)) +
geom_line(aes(group = Breathing_Cond), size = 1, position = position_dodge(width = 0.3)) +
geom_errorbar(width=.25, size = 1, aes(ymin=emmean-SE, ymax=emmean+SE), position = position_dodge(width = 0.3)) +
labs(y = title, x = "Phase")+
scale_colour_manual(values=cbPalette)+
theme_apa()
}
# Load in data ####
data <- read_delim("../loc_data/Data_SF.txt")
audioData <- as.data.frame(read_parquet("../loc_data/df_gemaps_func.parquet"))
# Factorize
audioData$participantNum = as.factor(audioData$participantNum)
audioData$phaseName = as.factor(audioData$phaseName)
# Removing the last two phases (and all related data) + habituation
audioData = audioData[audioData$phaseName != "SART", ]
audioData = audioData[audioData$phaseName != "PassiveViewing", ]
audioData = audioData[audioData$phaseName != "Habituation", ]
# Subset of columns
audioData = subset(audioData, select = c(F0semitoneFrom27.5Hz_sma3nz_amean,
jitterLocal_sma3nz_amean,
shimmerLocaldB_sma3nz_amean,
HNRdBACF_sma3nz_amean,
MeanVoicedSegmentLengthSec,
VoicedSegmentsPerSec,
participantNum, phaseName))
# Add column with breathing condition
audioData$Breathing_Cond<- 0
for (i in 1:nrow(audioData)){
audioData$Breathing_Cond[i]<- data$Breathing_Condition[audioData$participantNum[i] == data$Subject]
}
audioData$Breathing_Cond<- as.factor(audioData$Breathing_Cond)
# Visualization of the data
densityPlot(audioData$F0semitoneFrom27.5Hz_sma3nz_amean)
densityPlot(audioData$jitterLocal_sma3nz_amean)
densityPlot(audioData$shimmerLocaldB_sma3nz_amean)
densityPlot(audioData$HNRdBACF_sma3nz_amean)
densityPlot(audioData$MeanVoicedSegmentLengthSec)
densityPlot(audioData$VoicedSegmentsPerSec)
# testing #####
# 1) F0semitoneFrom27.5Hz_sma3nz_amean ####
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ phaseName*Breathing_Cond + (1|participantNum)' # Declare formula
dataModel = audioData # Ensure correct data is taken
rm(d0.1, d0.2, d0.3, tabel, chosenModel, emmeans0.1, emmeans0.2, emm0.1, figure) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
plot(effect("phaseName:Breathing_Cond", chosenModel[[1]])) # Visualize the three way interaction we are interested in
emmeans0.1<- emmeans(chosenModel[[1]], pairwise ~ phaseName | Breathing_Cond, adjust ="none", type = "response") # Pairwise comparisons
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Store Pvalues to correct for multiple corrections later
# Figure
figure<- plotfunction(emm0.1, "F0")
figure<- figure + annotate('text', x=1.5, y=mean(emm0.1$emmean) + (max(emm0.1$emmean) - min(emm0.1$emmean)) / 2, label='', size=7)
figure<- figure +
geom_text(x=1.5, y=28.7, label="*", colour = "#0072B2")
figure
